use std::collections::HashMap;
use std::mem::take;

use lalrpop_util::ParseError;

use crate::runfile::*;
use crate::doubled;

grammar;

extern {
    type Error = String;
}

match {
    r"![^\n]*\n" => {}, // Defined comments as "!..." so whitespace is lexed by the default lexer
    r"b(?:!|r)?|r!?" => BFLAGS,
    r"[ \t]+" => " ",
} else {
    r"\s+" => "\n",
    r"[[:alnum:]%&*-/:<-@\[\]-_{-~]+" => CLARG,
    _
}

pub RunFile: RunFile = {
    Targets
}

Targets: RunFile = {
    "##" " "? <m:TargetMeta> "\n" <c:Commands> "#/" "\n"* <mut t:Targets> => {
        let mut n = match take(&mut t.global_target) {
            Some(t) => t,
            None => Target::default()
        };
        if let Some(_) = n.commands.get(&m) {
            panic!("Multiple definitions of global target");
        }
        n.commands.insert(m, c);
        t.global_target = Some(n);
        t
    },
    "#-" " "? <m:TargetMeta> "\n" <c:Commands> "#/" "\n"* <mut t:Targets> => {
        let mut n = match take(&mut t.default_target) {
            Some(t) => t,
            None => Target::default()
        };
        if let Some(_) = n.commands.get(&m) {
            panic!("Multiple definitions of default target");
        }
        n.commands.insert(m, c);
        t.default_target = Some(n);
        t
    },
    "#" <s:CLARG> " "? <m:TargetMeta> "\n" <c:Commands> "#/" "\n"* <mut t:Targets> => {
        let target_name = s.to_owned();
        let mut n = match t.targets.remove(&target_name) {
            Some(t) => t,
            None => Target::default()
        };
        if let Some(_) = n.commands.get(&m) {
            panic!("Multiple definitions of target {}", target_name);
        }
        n.commands.insert(m, c);
        t.targets.insert(target_name, n);
        t
    },
    => RunFile {
        global_target: None,
        default_target: None,
        targets: HashMap::new(),
    }
}

TargetMeta: TargetMeta = {
    BFLAGS => TargetMeta {
        script: match <> {
            "b!" => ScriptType::BuildOnly,
            "b"  => ScriptType::Build,
            "br" => ScriptType::BuildAndRun,
            "r"  => ScriptType::Run,
            "r!" => ScriptType::RunOnly,
            _ => unreachable!()
        }
    },
    => TargetMeta { script: ScriptType::BuildAndRun },
}

Commands: Vec<Command> = {
    <mut x:Commands> <c:Command> "\n" => {
        x.push(c);
        x
    },
    <x:Commands> "\n" => x,
    <Command> "\n" => vec![<>],
    "\n" => vec![],
}

pub Command: Command = {
    <t:CLARG> <a:(" " <Args>)?> => Command {
        target: t.to_owned(),
        args: match a { Some(a) => a, None => vec![] },
    }
}

Args: Vec<Argument> = {
    <mut a:(<Arg> " ")*> <l:Arg> => {
        a.push(l);
        a
    }
}

Arg: Argument = {
    <DoubleQuotedArg> => <>,
    <QuotedArg> => Argument { parts: vec![ArgPart::Str(<>.to_owned())] },
    CLARG => Argument { parts: vec![ArgPart::Str(<>.to_owned())] },
    r"\$[[:digit:]]+" =>? match <>[1..].parse::<usize>() {
        Ok(i) => Ok(Argument { parts: vec![ArgPart::Arg(i)] }),
        Err(e) => Err(ParseError::User { error: format!("{}", e)}),
    },
    "$" <CLARG> => Argument { parts: vec![ArgPart::Var(<>.to_owned())] },
    "$" "(" <Command> ")" => Argument { parts: vec![ArgPart::Cmd(<>)] },
}

QuotedArg: String = {
    r"'[[:alnum:] !#$%&(-/:-@\[\]-`{-~]*'" => <>[1..<>.len() - 1].to_owned(),
}

DoubleQuotedArg: Argument = {
    r#""[[:alnum:] !#$%&(-/:-@\[\]-`{-~]*""# =>? Ok(Argument { parts: doubled::DoubledArgParser::new().parse(<>)? })
}
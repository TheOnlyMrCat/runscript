use std::collections::HashMap;
use std::mem::take;

use lalrpop_util::ParseError;

use crate::runfile::*;
use crate::doubled;
use crate::err::RunscriptError;

grammar;

extern {
    type Error = RunscriptError;
}

match {
    r"![^\n]*\n" => {}, // Defined comments as "!..." so newlines are lexed by the default lexer
    r"[ \t]+" => {},   // Then need to ignore spaces and tabs
    r"b(?:!|r)?|r!?" => BFLAGS,
} else {
    r"\s+" => "\n",
    r"[[:alnum:]%*-/:<-@\[\]-_{}~]+" => CLARG,
    _
}

pub RunFile: RunFile = {
    Targets
}

Targets: RunFile = {
    <mut t:Targets> "\n"* <l:@L> "##" <m:TargetMeta> <r:@R> "\n" <c:Lines> "#/"  =>? {
        let mut n = match take(&mut t.global_target) {
            Some(t) => t,
            None => Target::default()
        };
        if let Some(t) = n.commands.get(&m) {
            return Err(ParseError::User { error: RunscriptError::MultipleDefinition {
                target: "#".to_owned(),
                location: (l, r),
                previous_def: t.loc,
            }});
        }
        n.commands.insert(m, TargetInfo { commands: c, loc: (l, r) });
        t.global_target = Some(n);
        Ok(t)
    },
    <mut t:Targets> "\n"* <l:@L> "#-" <m:TargetMeta> <r:@R> "\n" <c:Lines> "#/" =>? {
        let mut n = match take(&mut t.default_target) {
            Some(t) => t,
            None => Target::default()
        };
        if let Some(t) = n.commands.get(&m) {
            return Err(ParseError::User { error: RunscriptError::MultipleDefinition {
                target: "-".to_owned(),
                location: (l, r),
                previous_def: t.loc,
            }});
        }
        n.commands.insert(m, TargetInfo { commands: c, loc: (l, r) });
        t.default_target = Some(n);
        Ok(t)
    },
    <mut t:Targets> "\n"* <l:@L> "#" <s:CLARG> <m:TargetMeta> <r:@R> "\n" <c:Lines> "#/" =>? {
        let target_name = s.to_owned();
        let mut n = match t.targets.remove(&target_name) {
            Some(t) => t,
            None => Target::default()
        };
        if let Some(t) = n.commands.get(&m) {
            return Err(ParseError::User { error: RunscriptError::MultipleDefinition {
                target: target_name,
                location: (l, r),
                previous_def: t.loc,
            }});
        }
        n.commands.insert(m, TargetInfo { commands: c, loc: (l, r) });
        t.targets.insert(target_name, n);
        Ok(t)
    },
    => RunFile {
        global_target: None,
        default_target: None,
        targets: HashMap::new(),
    }
}

TargetMeta: TargetMeta = {
    BFLAGS => TargetMeta {
        script: match <> {
            "b!" => ScriptType::BuildOnly,
            "b"  => ScriptType::Build,
            "br" => ScriptType::BuildAndRun,
            "r"  => ScriptType::Run,
            "r!" => ScriptType::RunOnly,
            _ => unreachable!()
        }
    },
    => TargetMeta { script: ScriptType::BuildAndRun },
}

Lines: Vec<Command> = {
    <mut x:Lines> <c:Line> "\n" => {
        x.push(c);
        x
    },
    <x:Lines> "\n" => x,
    <Line> "\n" => vec![<>],
    "\n" => vec![],
}

pub Line: Command = {
    <Command>,
    <c:Line> "&&" <mut n:Command> => {
        *n.chained = ChainedCommand::And(c);
        n
    },
    <c:Line> "||" <mut n:Command> => {
        *n.chained = ChainedCommand::Or(c);
        n
    },
    <c:Line> "|" <mut n:Command> => {
        *n.chained = ChainedCommand::Pipe(c);
        n
    },
}

Command: Command = {
    <l:@L> <t:CLARG> <r:@R> <a:Arg*> => Command {
        target: t.to_owned(),
        args: a,
        chained: Box::new(ChainedCommand::None),
        loc: (l, r),
    }
}

Arg: Argument = {
    CLARG => Argument { parts: vec![ArgPart::Str(<>.to_owned())] },
    r#""[[:alnum:] !#$%&'(-/:-@\[\]-`{-~]*""# =>? Ok(Argument { parts: doubled::DoubledArgParser::new().parse(<>)? }),
    r#"'[[:alnum:] "!#$%&(-/:-@\[\]-`{-~]*'"# => Argument { parts: vec![ArgPart::Str(<>[1..<>.len() - 1].to_owned())] },
    r"\$[[:digit:]]+" => Argument { parts: vec![ArgPart::Arg(<>[1..].parse::<usize>().expect("Expected regex to only match digits"))] },
    "$" <CLARG> => Argument { parts: vec![ArgPart::Var(<>.to_owned())] },
    "$" "(" <Command> ")" => Argument { parts: vec![ArgPart::Cmd(<>)] },
}
